
import React, { useState } from 'react';
import { Product } from '@/types/product';
import ProductGrid from './ProductGrid';
import AddProductModal from './AddProductModal';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Plus, Search, Package } from 'lucide-react';
import { toast } from 'sonner';

// Mock products for demo purposes
const MOCK_PRODUCTS: Product[] = [
  {
    id: '1',
    name: 'Wireless Headphones',
    description: 'High-quality wireless headphones with noise cancellation',
    price: 129.99,
    category: 'Electronics',
    sku: 'WH-001',
    stock: 15,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: '2',
    name: 'Smart Watch',
    description: 'Track your fitness and stay connected with this smart watch',
    price: 199.99,
    category: 'Electronics',
    sku: 'SW-002',
    stock: 8,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: '3',
    name: 'Bluetooth Speaker',
    description: 'Portable speaker with excellent sound quality',
    price: 79.99,
    category: 'Electronics',
    sku: 'BS-003',
    stock: 22,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: '4',
    name: 'Organic Cotton T-Shirt',
    description: 'Comfortable, eco-friendly t-shirt made from organic cotton',
    price: 24.99,
    category: 'Apparel',
    sku: 'AP-001',
    stock: 50,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

const ProductCatalog: React.FC = () => {
  const [products, setProducts] = useState<Product[]>(MOCK_PRODUCTS);
  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [searchQuery, setSearchQuery] = useState<string>('');

  const handleAddProduct = () => {
    setEditingProduct(null);
    setIsModalOpen(true);
  };

  const handleEditProduct = (product: Product) => {
    setEditingProduct(product);
    setIsModalOpen(true);
  };

  const handleDeleteProduct = (id: string) => {
    // Normally we'd call an API here
    setProducts(products.filter((p) => p.id !== id));
    toast.success('Product deleted successfully');
  };

  const handleSaveProduct = (productData: Partial<Product>) => {
    if (editingProduct) {
      // Update existing product
      setProducts(
        products.map((p) =>
          p.id === editingProduct.id
            ? { ...p, ...productData, updatedAt: new Date() }
            : p
        )
      );
      toast.success('Product updated successfully');
    } else {
      // Add new product
      const newProduct: Product = {
        id: `${Date.now()}`, // In real app, this would be generated by the backend
        ...productData as Omit<Product, 'id' | 'createdAt' | 'updatedAt'>,
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      setProducts([...products, newProduct]);
      toast.success('Product added successfully');
    }
  };

  const filteredProducts = products.filter(
    (product) =>
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.category.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
          <Package className="h-6 w-6 text-pos-primary" />
          Product Catalog
        </h2>
        <Button
          onClick={handleAddProduct}
          className="bg-pos-primary hover:bg-pos-secondary"
        >
          <Plus className="h-5 w-5 mr-1" />
          Add Product
        </Button>
      </div>

      <div className="mb-6 relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
        <Input
          placeholder="Search products..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="pl-10"
        />
      </div>

      <ProductGrid
        products={filteredProducts}
        onDelete={handleDeleteProduct}
        onEdit={handleEditProduct}
      />

      <AddProductModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSave={handleSaveProduct}
        editingProduct={editingProduct}
      />
    </div>
  );
};

export default ProductCatalog;
